{"version":3,"file":"static/js/156.1646340a.chunk.js","mappings":"0PAAaA,EAAiB,SAAC,GAQ7B,MAAO,CACLC,YAHE,EALJA,YASEC,MAJE,EAJJA,MASEC,aALE,EAHJA,aASEC,SANE,EAFJA,SASEC,WAPE,EADJC,OAE0BC,KAAI,qBAAGC,IAAH,IAAoBC,KAAK,MAQxD,ECZYC,EAAU,mCAAG,WAAMC,GAAN,2FACDC,EAAAA,GAAAA,IAAA,iBAAoBD,GAAM,CAC/CE,OAAQ,CACNC,QAAS,sCAHW,uBAChBC,EADgB,EAChBA,KAKFC,EAAQhB,EAAee,GANL,kBAOjBC,GAPiB,2CAAH,sD,6CCAVC,EAAUC,EAAAA,GAAAA,IAAH,4DAIPC,EAAWD,EAAAA,GAAAA,IAAH,+CAGRE,EAAoBF,EAAAA,GAAAA,IAAH,+FAKjBG,GAAWH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,gFAORK,EAAKL,EAAAA,GAAAA,GAAH,6DAKFM,EAASN,EAAAA,GAAAA,OAAH,+P,SCfNO,EAAe,SAAC,GAAe,IAAD,EAAZT,EAAY,EAAZA,MACrBf,EAA2De,EAA3Df,YAAaC,EAA8Cc,EAA9Cd,MAAOC,EAAuCa,EAAvCb,aAAcC,EAAyBY,EAAzBZ,SAAUC,EAAeW,EAAfX,WAC9CqB,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,MACbC,EAAe,OAAGJ,QAAH,IAAGA,GAAH,UAAGA,EAAUK,aAAb,aAAG,EAAiBC,KACzC,OACE,iCACE,SAACR,EAAD,CACES,KAAK,SACLC,QAAS,0BAAMN,EAAU,oBAACF,EAASK,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,IAAzC,EAFX,sBAMA,UAACf,EAAD,YACE,gBACEkB,IAAG,0CAAqClC,GACxCmC,IAAKlC,KAEP,UAACiB,EAAD,YACE,wBAAKjB,KACL,wCAAgBmC,KAAKC,MAAqB,GAAfnC,GAA3B,QACA,sCACA,uBAAIC,KACJ,oCACA,uBAAIC,WAGR,UAACe,EAAD,YACE,oDACA,2BACE,SAACG,EAAD,WACE,SAACF,EAAD,CAAUkB,GAAG,OAAOR,MAAO,CAAEC,KAAMF,GAAnC,qBAIF,SAACP,EAAD,WACE,SAACF,EAAD,CAAUkB,GAAG,UAAUR,MAAO,CAAEC,KAAMF,GAAtC,8BAMN,SAAC,EAAAU,SAAD,CAAUC,SAAU,KAApB,UACE,SAAC,KAAD,QAIP,ECvDYC,EAAY,WACvB,MCD2B,WAC3B,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAO3B,EAAP,KAAc4B,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QASR,OARAE,EAAAA,EAAAA,YAAU,WACRL,GAAa,GACbpC,EAAWuC,GACRG,KAAKR,GACLS,MAAML,GACNM,SAAQ,kBAAMR,GAAa,EAAnB,GACZ,GAAE,CAACG,IAEG,CAAEjC,MAAAA,EAAO6B,UAAAA,EAAWE,MAAAA,EAC5B,CDdqCQ,GAA5BvC,EAAR,EAAQA,MAAO6B,EAAf,EAAeA,UAAWE,EAA1B,EAA0BA,MAE1B,OACE,gCACGF,IAAa,SAACW,EAAA,EAAD,IACbT,IAAS,iDACT/B,IAAS,SAACS,EAAD,CAAcT,MAAOA,MAGpC,C","sources":["helpers/transformMovie.js","utils/fetchMovie.js","components/MovieDetails/MovieDetails.styled.js","components/MovieDetails/MovieDetails.jsx","pages/MoviePage/MoviePage.jsx","hooks/useFetchMovie.js"],"sourcesContent":["export const transformMovie = ({\n  poster_path,\n  title,\n  vote_average,\n  overview,\n  genres,\n}) => {\n  const genresName = genres.map(({ name }) => name).join(', ');\n  return {\n    poster_path,\n    title,\n    vote_average,\n    overview,\n    genresName,\n  };\n};\n","import axios from 'axios';\nimport { transformMovie } from '../helpers/transformMovie';\n\nexport const fetchMovie = async id => {\n  const { data } = await axios.get(`/movie/${id}`, {\n    params: {\n      api_key: '65573c76cf88d807ccbaf09ca79feb15',\n    },\n  });\n  const movie = transformMovie(data);\n  return movie;\n};\n","import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const InfoBox = styled.div`\n  display: flex;\n  padding: 24px;\n`;\nexport const InfoText = styled.div`\n  padding-left: 24px;\n`;\nexport const AdditionalInfoBox = styled.div`\n  padding: 16px;\n  box-shadow: 1px 1px 4px rgba(126, 147, 255, 0.4);\n`;\n\nexport const InfoLink = styled(NavLink)`\n  font-size: 20px;\n  &.active {\n    color: red;\n  }\n`;\n\nexport const Li = styled.li`\n  font-size: 20px;\n  padding: 2px;\n`;\n\nexport const Button = styled.button`\n  margin-left: 24px;\n  padding: 6px;\n  font-size: 20px;\n  border: 1px solid #c5c5c5;\n  border-radius: 6px;\n\n  order: 1;\n  align-self: stretch;\n\n  &:focus,\n  &:hover {\n    cursor: pointer;\n    background: #29abdd;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation, useNavigate, Outlet } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport {\n  InfoBox,\n  AdditionalInfoBox,\n  InfoLink,\n  InfoText,\n  Button,\n  Li,\n} from './MovieDetails.styled.js';\n\nexport const MovieDetails = ({ movie }) => {\n  const { poster_path, title, vote_average, overview, genresName } = movie;\n  const location = useLocation();\n  const navigation = useNavigate();\n  const currentLocation = location?.state?.from;\n  return (\n    <>\n      <Button\n        type=\"button\"\n        onClick={() => navigation(location.state?.from ?? '/')}\n      >\n        Go back\n      </Button>\n      <InfoBox>\n        <img\n          src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n          alt={title}\n        />\n        <InfoText>\n          <h2>{title}</h2>\n          <p>User Score: {Math.round(vote_average * 10)}%</p>\n          <h2>Overview</h2>\n          <p>{overview}</p>\n          <h2>Genres</h2>\n          <p>{genresName}</p>\n        </InfoText>\n      </InfoBox>\n      <AdditionalInfoBox>\n        <h3>Additional information</h3>\n        <ul>\n          <Li>\n            <InfoLink to=\"cast\" state={{ from: currentLocation }}>\n              Cast\n            </InfoLink>\n          </Li>\n          <Li>\n            <InfoLink to=\"reviews\" state={{ from: currentLocation }}>\n              Reviews\n            </InfoLink>\n          </Li>\n        </ul>\n      </AdditionalInfoBox>\n      <Suspense fallback={null}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nMovieDetails.propTypes = {\n  movie: PropTypes.object.isRequired,\n};\n","import { useFetchMovie } from 'hooks/useFetchMovie';\nimport { Loader } from 'components/Loader/Loader';\nimport { MovieDetails } from 'components/MovieDetails/MovieDetails';\n\nexport const MoviePage = () => {\n  const { movie, isLoading, error } = useFetchMovie();\n\n  return (\n    <>\n      {isLoading && <Loader />}\n      {error && <p>Oops! Something wrong</p>}\n      {movie && <MovieDetails movie={movie} />}\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { fetchMovie } from 'utils/fetchMovie';\nimport { useParams } from 'react-router-dom';\n\nexport const useFetchMovie = () => {\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMovie(movieId)\n      .then(setMovie)\n      .catch(setError)\n      .finally(() => setIsLoading(false));\n  }, [movieId]);\n\n  return { movie, isLoading, error };\n};\n"],"names":["transformMovie","poster_path","title","vote_average","overview","genresName","genres","map","name","join","fetchMovie","id","axios","params","api_key","data","movie","InfoBox","styled","InfoText","AdditionalInfoBox","InfoLink","NavLink","Li","Button","MovieDetails","location","useLocation","navigation","useNavigate","currentLocation","state","from","type","onClick","src","alt","Math","round","to","Suspense","fallback","MoviePage","useState","setMovie","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","then","catch","finally","useFetchMovie","Loader"],"sourceRoot":""}